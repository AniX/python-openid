import cgi
import urlparse

from xml.sax.saxutils import escape, quoteattr
from openid import oidUtil

def buildRedirect(redirect_url):
    return """\
Location: %s
Content-type: text/plain

Redirecting to %s""" % (redirect_url, redirect_url)

def parseQuery(qs):
    query = {}
    for k, v in cgi.parse_qsl(qs):
        query[k] = v
    return query

class SimpleOpenIDProxy(object):
    def __init__(self, query, this_uri):
        self.this_uri = this_uri
        self.parsed_uri = urlparse.urlparse(this_uri)
        self.query = query

    def getUserInput(self):
        """Return the URL that the user entered to be verified.

        This just gets the URL from the form data. This step will fail
        if there was no input.
        """
        return self.query.get('identity_url')

    def getParameters(self):
        """Return all parameters that are part of the OpenID protocol,
        as a dictionary.

        That is, return all parameters that have 'openid.' as a prefix
        """
        return self.query

    def getReturnTo(self, token):
        """Generate a return_to URL.

        The return_to URL should trigger the processServerResult
        method of the openid_consumer object to be called.

        Our return_to URL is this script with the parameter
        step=process and the library's token attached. We could have
        used some other mechanism to get the token to the next step,
        such as setting a cookie, but adding it to the URL is easy.
        """
        return_to_query = [('step', 'process'), ('token', token)]
        return oidUtil.appendArgs(self.this_uri, return_to_query)

    def verifyReturnTo(self, return_to):
        """Check that the return_to URL from the server is what we
        expect.

        We make sure that it is something that could have been
        generated by our getReturnTo method.
        """
        parsed_uri = urlparse.urlparse(return_to)
        if parsed_uri[:4] != self.parsed_uri[:4]:
            return False

        # query is the query from the return_to url.
        #
        # self.query is the query this request received.
        #
        # Check that they match, on the parameters included in the
        # return_to url.
        query = parseQuery(parsed_uri[4])
        if query.get('step') != self.query.get('step'):
            return False

        if query.get('token') != self.query.get('token'):
            return False

        return True

    def getToken(self):
        """Extract the token from the query for the library."""
        return self.query.get('token')

    # ======================================================================
    # Callbacks from processServerResult

    def loginGood(self, normalized_id):
        fmt = "You have successfully verified %s as your identity."
        message = fmt % (escape(normalized_id),)
        return message, False, normalized_id

    def loginCancelled(self):
        return "Verification cancelled.", False, None

    ## Failure cases

    def loginError(self, normalized_id):
        if normalized_id is not None:
            fmt = "There was an error attempting to verify %s."
            message = fmt % (escape(normalized_id),)
        else:
            message = (
                'There was an error processing the response from the server.')
        return message, True, normalized_id

    def serverError(self, server_message):
        fmt = "Error from the server: %s"
        message = fmt % escape(server_message)
        return message, True, None

class ExampleDispatcher(object):
    boilerplate = ''

    def __init__(self, openid_consumer, query, this_uri):
        self.query = query
        self.step = self.query.get('step', 'start')
        self.openid_consumer = openid_consumer
        self.this_uri = this_uri
        self.proxy = SimpleOpenIDProxy(query, this_uri)

    def write(self, data):
        raise NotImplementedError

    def sendResponse(self, code):
        raise NotImplementedError

    def redirect(self, redirect_url):
        self.sendResponse(302)
        self.write(buildRedirect(redirect_url))

    def run(self):
        if self.step == 'start':
            self.doStart()
        elif self.step == 'redirect':
            self.doRedirect()
        elif self.step == 'process':
            self.doProcess()
        else:
            self.doUnknown()

    def doUnknown(self):
        # For unknown step, return to step 0
        self.redirect(self.this_uri)

    def doStart(self):
        self.render()

    def doRedirect(self):
        redirect_url = self.openid_consumer.constructRedirect(self.proxy)
        if redirect_url is not None:
            self.redirect(redirect_url)
        else:
            user_url = self.proxy.getUserInput()
            if user_url is None:
                self.render('Enter an identity URL to verify.',
                            css_class='error')
            else:
                fmt = 'Failed to fetch identity URL %s'
                message = fmt % (escape(user_url),)
                self.render(message, css_class='error', form_contents=user_url)

    def doProcess(self):
        # Calls one of
        #  loginGood
        #  loginCancelled
        #  loginError
        #  serverError
        result = self.openid_consumer.processServerResponse(self.proxy)
        message, err, form_contents = result
        if err:
            css_class = 'error'
        else:
            css_class = 'alert'
        self.render(message, css_class, form_contents)

    def render(self, message=None, css_class='alert', form_contents=None):
        self.sendResponse(200)
        self.pageHeader()
        if message:
            self.write("<div class='%s'>" % (css_class,))
            self.write(message)
            self.write("</div>")
        self.pageFooter(form_contents)

    def pageHeader(self, title="Python OpenID Simple Example"):
        self.write('''\
Content-type: text/html

<html>
  <head><title>%s</title></head>
  <style type="text/css">
      * {font-family:verdana,sans-serif;}
      body {width:50em; margin:1em;}
      div {padding:.5em; }
      table {margin:none;padding:none;}
      .alert {border:1px solid #e7dc2b; background: #fff888;}
      .error {border:1px solid #f00; background: #faa;}
      #login {border:1px solid #777; background: #ddd; margin-top:1em;padding-bottom:0em;}
  </style>
  <body>
    <h1>%s</h1>
    %s
''' % (title, title, self.boilerplate))

    def pageFooter(self, form_contents):
        if not form_contents:
            form_contents = ''

        self.write('''\
    <div id="login">
      <form method="get" action=%s>
        <input type="hidden" name="step" value="redirect" />
        Identity&nbsp;URL:
        <input type="text" name="identity_url" value=%s />
        <input type="submit" value="Verify" />
      </form>
    </div>
  </body>
</html>
''' % (quoteattr(self.this_uri), quoteattr(form_contents)))
